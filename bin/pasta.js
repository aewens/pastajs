// Generated by CoffeeScript 1.10.0
(function() {
  define([], function() {
    var Pasta;
    Pasta = (function() {
      function Pasta(value) {
        if (typeof value !== "string") {
          return "Not a string";
        }
        this.value = value;
        this;
      }

      Pasta.prototype.int = function(value) {
        if (value === void 0) {
          return parseInt(this.value, 10);
        } else {
          return parseInt(value, 10);
        }
      };

      Pasta.prototype.check = function(foreign) {
        if (!(foreign instanceof Pasta)) {
          foreign = new Pasta(foreign);
        }
        if (foreign.value === void 0) {
          return null;
        }
        return foreign;
      };

      Pasta.prototype.rev = function(value) {
        if (value === void 0) {
          return this.value.split("").reverse().join("");
        } else {
          return value.split("").reverse().join("");
        }
      };

      Pasta.prototype.pad = function(a, b) {
        if (a.length > b.length) {
          return this.pad(a, "0" + b);
        }
        if (a.length < b.length) {
          return this.pad("0" + a, b);
        }
        if (a.length === b.length) {
          return [a, b];
        }
      };

      Pasta.prototype.unpad = function(c) {
        if (c === void 0) {
          if (this.value[0] === "0") {
            return this.unpad(this.value.substr(1));
          } else {
            return this.value;
          }
        } else {
          if (c[0] === "0") {
            return this.unpad(c.substr(1));
          } else {
            return c;
          }
        }
      };

      Pasta.prototype.zeros = function(a, zs) {
        if (zs === 0) {
          return a;
        } else {
          return this.zeros(a.concat("0"), zs - 1);
        }
      };

      Pasta.prototype.add = function(foreign) {
        var a, aa, ab, b, bb, c, i, ia, ib, k, len, other, pab, ref, res;
        other = this.check(foreign);
        if (other === null) {
          return "Invalid input: " + foreign;
        }
        a = this.value;
        b = other.value;
        pab = this.pad(a, b);
        aa = this.rev(pab[0]);
        bb = this.rev(pab[1]);
        len = (aa.length + bb.length) / 2;
        res = "";
        c = 0;
        for (i = k = 0, ref = len; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
          ia = this.int(aa[i]);
          ib = this.int(bb[i]);
          ab = "" + (ia + ib + c);
          if (ab.length > 1) {
            c = this.int(ab[0]);
            ab = ab[1];
          } else {
            c = 0;
          }
          res = res.concat(ab);
        }
        res = res.concat(c);
        res = this.rev(res);
        this.value = res;
        return this;
      };

      Pasta.prototype.sub = function(foreign) {
        var a, aa, ab, b, bb, c, cc, i, ia, ib, k, len, other, pab, ref, res;
        other = this.check(foreign);
        if (other === null) {
          return "Invalid input: " + foreign;
        }
        a = this.value;
        b = other.value;
        pab = this.pad(a, b);
        aa = this.rev(pab[0]);
        bb = this.rev(pab[1]);
        len = (aa.length + bb.length) / 2;
        res = "";
        c = 0;
        for (i = k = 0, ref = len; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
          ia = this.int(aa[i]);
          ib = this.int(bb[i]);
          cc = false;
          if ((ia - c) < ib) {
            ia = ia + 10;
            cc = true;
          }
          ab = "" + ((ia - c) - ib);
          c = cc ? 1 : 0;
          res = res.concat(ab);
        }
        res = res.concat(c);
        res = this.rev(res);
        this.value = res;
        return this;
      };

      Pasta.prototype.mul = function(foreign) {
        var a, aa, ab, b, bb, c, cc, i, ia, ib, j, k, l, len, m, other, pab, ref, ref1, ref2, res;
        other = this.check(foreign);
        if (other === null) {
          return "Invalid input: " + foreign;
        }
        a = this.value;
        b = other.value;
        pab = this.pad(a, b);
        aa = this.rev(pab[0]);
        bb = this.rev(pab[1]);
        len = (aa.length + bb.length) / 2;
        res = new Pasta("0");
        cc = [];
        for (i = k = 0, ref = len; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
          ib = this.int(bb[i]);
          if (ib === 0) {
            continue;
          }
          for (j = l = 0, ref1 = len; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
            ia = this.int(aa[j]);
            if (ia === 0) {
              continue;
            }
            ab = this.zeros("" + (ia * ib), j);
            cc.push(this.zeros(ab, i));
          }
        }
        for (c = m = 0, ref2 = cc.length; 0 <= ref2 ? m < ref2 : m > ref2; c = 0 <= ref2 ? ++m : --m) {
          res.add(cc[c]);
        }
        this.value = res.value;
        return this;
      };

      Pasta.prototype._exp = function(a, b, xs) {
        var bb;
        if (b.unpad() === "") {
          return xs;
        } else {
          bb = b.sub("1");
          xs.push(a);
          return this._exp(a, bb, xs);
        }
      };

      Pasta.prototype.exp = function(foreign) {
        var a, b, k, other, ref, res, x, xs;
        other = this.check(foreign);
        if (other === null) {
          return "Invalid input: " + foreign;
        }
        a = this.value;
        b = other;
        res = new Pasta("1");
        xs = this._exp(a, b, []);
        for (x = k = 0, ref = xs.length; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
          res.mul(xs[x]);
        }
        this.value = res.value;
        return this;
      };

      return Pasta;

    })();
    return Pasta;
  });

}).call(this);
